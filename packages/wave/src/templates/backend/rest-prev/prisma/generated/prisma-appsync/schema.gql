type User {
    id: Int!
    email: AWSEmail!
    fullname: String
    posts: [Post]
    createdAt: AWSDateTime!
}

type Post {
    id: Int!
    author: User
    authorId: Int
    title: String!
    views: Int
    published: Boolean
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
}

type BatchPayload {
    count: Int
}

enum OrderByArg {
    ASC
    DESC
}

enum NullArg {
    NULL
}

input UserFilter {
    some: UserWhereInputWithoutNullables
    every: UserWhereInputWithoutNullables
    none: UserWhereInputWithoutNullables
}

input UserWhereInputWithoutNullables {
    OR: [UserWhereInput]
    NOT: [UserWhereInput]
    AND: [UserWhereInput]
    id: IntFilter
    email: AWSEmailFilter
    fullname: StringNullableFilter
    posts: PostFilter
    createdAt: AWSDateTimeFilter
}

input UserWhereInput {
    is: NullArg
    isNot: NullArg
    OR: [UserWhereInput]
    NOT: [UserWhereInput]
    AND: [UserWhereInput]
    id: IntFilter
    email: AWSEmailFilter
    fullname: StringNullableFilter
    posts: PostFilter
    createdAt: AWSDateTimeFilter
}

input UserScalarWhereInput {
    OR: [UserScalarWhereInput]
    NOT: [UserScalarWhereInput]
    AND: [UserScalarWhereInput]
    id: IntFilter
    email: AWSEmailFilter
    fullname: StringNullableFilter
    createdAt: AWSDateTimeFilter
}

input UserWhereUniqueInput {
    id: Int
    email: AWSEmail
}

input UserExtendedWhereUniqueInput {
    OR: [UserWhereInput]
    NOT: [UserWhereInput]
    AND: [UserWhereInput]
    id: Int
    email: AWSEmail
    fullname: StringNullableFilter
    posts: PostFilter
    createdAt: AWSDateTimeFilter
}

input UserOrderByInput {
    id: OrderByArg
    email: OrderByArg
    fullname: OrderByArg
    posts: PostOrderByInput
    createdAt: OrderByArg
}

input UserCreateInput {
    id: Int
    email: AWSEmail!
    fullname: String
    posts: UserPostsCreateNestedInput
    createdAt: AWSDateTime
}

input UserCreateManyInput {
    id: Int
    email: AWSEmail!
    fullname: String
    createdAt: AWSDateTime
}

input UserUpdateInput {
    id: Int
    email: AWSEmail
    fullname: String
    posts: UserPostsUpdateNestedInput
    createdAt: AWSDateTime
}

input UserOperationInput {
    id: IntOperation
}

input UserUpdateUniqueInput {
    data: UserUpdateInput!
    where: UserWhereUniqueInput!
}

input UserUpdateManyInput {
    where: UserScalarWhereInput!
    data: UserUpdateInput!
}

input UserUpsertInput {
    create: UserCreateInput!
    update: UserUpdateInput!
}

input UserUpsertUniqueInput {
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
}

input UserConnectOrCreateInput {
    where: UserWhereUniqueInput!
    create: UserCreateInput!
}

input UserPostsCreateNestedInput {
    create: [PostCreateInput]
    connect: [PostWhereUniqueInput]
    connectOrCreate: [PostConnectOrCreateInput]
}

input UserPostsUpdateNestedInput {
    connect: [PostWhereUniqueInput]
    create: [PostCreateInput]
    connectOrCreate: [PostConnectOrCreateInput]
    update: [PostUpdateUniqueInput]
    upsert: [PostUpsertUniqueInput]
    delete: [PostWhereUniqueInput]
    disconnect: [PostWhereUniqueInput]
    deleteMany: [PostScalarWhereInput]
    set: [PostWhereUniqueInput]
    updateMany: [PostUpdateManyInput]
}

input PostFilter {
    some: PostWhereInputWithoutNullables
    every: PostWhereInputWithoutNullables
    none: PostWhereInputWithoutNullables
}

input PostWhereInputWithoutNullables {
    OR: [PostWhereInput]
    NOT: [PostWhereInput]
    AND: [PostWhereInput]
    id: IntFilter
    author: UserWhereInput
    authorId: IntNullableFilter
    title: StringFilter
    views: IntNullableFilter
    published: BooleanNullableFilter
    createdAt: AWSDateTimeFilter
    updatedAt: AWSDateTimeFilter
}

input PostWhereInput {
    is: NullArg
    isNot: NullArg
    OR: [PostWhereInput]
    NOT: [PostWhereInput]
    AND: [PostWhereInput]
    id: IntFilter
    author: UserWhereInput
    authorId: IntNullableFilter
    title: StringFilter
    views: IntNullableFilter
    published: BooleanNullableFilter
    createdAt: AWSDateTimeFilter
    updatedAt: AWSDateTimeFilter
}

input PostScalarWhereInput {
    OR: [PostScalarWhereInput]
    NOT: [PostScalarWhereInput]
    AND: [PostScalarWhereInput]
    id: IntFilter
    authorId: IntNullableFilter
    title: StringFilter
    views: IntNullableFilter
    published: BooleanNullableFilter
    createdAt: AWSDateTimeFilter
    updatedAt: AWSDateTimeFilter
}

input PostWhereUniqueInput {
    id: Int
}

input PostExtendedWhereUniqueInput {
    OR: [PostWhereInput]
    NOT: [PostWhereInput]
    AND: [PostWhereInput]
    id: Int
    author: UserWhereInput
    authorId: IntNullableFilter
    title: StringFilter
    views: IntNullableFilter
    published: BooleanNullableFilter
    createdAt: AWSDateTimeFilter
    updatedAt: AWSDateTimeFilter
}

input PostOrderByInput {
    id: OrderByArg
    author: UserOrderByInput
    authorId: OrderByArg
    title: OrderByArg
    views: OrderByArg
    published: OrderByArg
    createdAt: OrderByArg
    updatedAt: OrderByArg
}

input PostCreateInput {
    id: Int
    author: PostAuthorCreateNestedInput
    title: String!
    views: Int
    published: Boolean
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

input PostCreateManyInput {
    id: Int
    title: String!
    views: Int
    published: Boolean
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

input PostUpdateInput {
    id: Int
    author: PostAuthorUpdateNestedInput
    title: String
    views: Int
    published: Boolean
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

input PostOperationInput {
    id: IntOperation
    views: IntOperation
}

input PostUpdateUniqueInput {
    data: PostUpdateInput!
    where: PostWhereUniqueInput!
}

input PostUpdateManyInput {
    where: PostScalarWhereInput!
    data: PostUpdateInput!
}

input PostUpsertInput {
    create: PostCreateInput!
    update: PostUpdateInput!
}

input PostUpsertUniqueInput {
    where: PostWhereUniqueInput!
    create: PostCreateInput!
    update: PostUpdateInput!
}

input PostConnectOrCreateInput {
    where: PostWhereUniqueInput!
    create: PostCreateInput!
}

input PostAuthorCreateNestedInput {
    create: UserCreateInput
    connect: UserWhereUniqueInput
    connectOrCreate: UserConnectOrCreateInput
}

input PostAuthorUpdateNestedInput {
    connect: UserWhereUniqueInput
    create: UserCreateInput
    connectOrCreate: UserConnectOrCreateInput
    update: UserUpdateInput
    upsert: UserUpsertInput
    delete: Boolean
    disconnect: Boolean
}

input IntOperation {
    set: Int
    increment: Int
    decrement: Int
    multiply: Int
    divide: Int
}

input FloatOperation {
    set: Float
    increment: Float
    decrement: Float
    multiply: Float
    divide: Float
}

input AWSDateTimeFilter {
    equals: AWSDateTime
    gt: AWSDateTime
    gte: AWSDateTime
    in: [AWSDateTime!]
    lt: AWSDateTime
    lte: AWSDateTime
    not: AWSDateTimeFilter
    notIn: [AWSDateTime!]
}

input AWSDateTimeNullableFilter {
    equals: AWSDateTime
    gt: AWSDateTime
    gte: AWSDateTime
    in: [AWSDateTime!]
    lt: AWSDateTime
    lte: AWSDateTime
    not: AWSDateTimeFilter
    notIn: [AWSDateTime!]
    isNull: Boolean
}

input AWSDateTimeListFilter {
    equals: [AWSDateTime!]
    has: AWSDateTime
    hasEvery: [AWSDateTime!]
    hasSome: [AWSDateTime!]
    isEmpty: Boolean
}

input FloatFilter {
    equals: Float
    gt: Float
    gte: Float
    in: [Float!]
    lt: Float
    lte: Float
    not: FloatFilter
    notIn: [Float!]
    isNull: Boolean
}

input FloatNullableFilter {
    equals: Float
    gt: Float
    gte: Float
    in: [Float!]
    lt: Float
    lte: Float
    not: FloatFilter
    notIn: [Float!]
    isNull: Boolean
}

input FloatListFilter {
    equals: [Float!]
    has: Float
    hasEvery: [Float!]
    hasSome: [Float!]
    isEmpty: Boolean
}

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: IntFilter
    notIn: [Int!]
}

input IntNullableFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: IntFilter
    notIn: [Int!]
    isNull: Boolean
}

input IntListFilter {
    equals: [Int!]
    has: Int
    hasEvery: [Int!]
    hasSome: [Int!]
    isEmpty: Boolean
}

input AWSJSONFilter {
    contains: String
    endsWith: String
    equals: AWSJSON
    in: [AWSJSON!]
    not: AWSJSONFilter
    notIn: [AWSJSON!]
    startsWith: String
}

input AWSJSONNullableFilter {
    contains: String
    endsWith: String
    equals: AWSJSON
    in: [AWSJSON!]
    not: AWSJSONFilter
    notIn: [AWSJSON!]
    startsWith: String
    isNull: Boolean
}

input AWSJSONListFilter {
    equals: [AWSJSON!]
    has: AWSJSON
    hasEvery: [AWSJSON!]
    hasSome: [AWSJSON!]
    isEmpty: Boolean
}

input AWSEmailFilter {
    contains: String
    endsWith: String
    equals: AWSEmail
    in: [AWSEmail!]
    not: AWSEmailFilter
    notIn: [AWSEmail!]
    startsWith: String
}

input AWSEmailNullableFilter {
    contains: String
    endsWith: String
    equals: AWSEmail
    in: [AWSEmail!]
    not: AWSEmailFilter
    notIn: [AWSEmail!]
    startsWith: String
    isNull: Boolean
}

input AWSEmailListFilter {
    equals: [AWSEmail!]
    has: AWSEmail
    hasEvery: [AWSEmail!]
    hasSome: [AWSEmail!]
    isEmpty: Boolean
}

input AWSURLFilter {
    contains: String
    endsWith: String
    equals: AWSURL
    in: [AWSURL!]
    not: AWSURLFilter
    notIn: [AWSURL!]
    startsWith: String
}

input AWSURLNullableFilter {
    contains: String
    endsWith: String
    equals: AWSURL
    in: [AWSURL!]
    not: AWSURLFilter
    notIn: [AWSURL!]
    startsWith: String
    isNull: Boolean
}

input AWSURLListFilter {
    equals: [AWSURL!]
    has: AWSURL
    hasEvery: [AWSURL!]
    hasSome: [AWSURL!]
    isEmpty: Boolean
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    in: [String!]
    not: StringFilter
    notIn: [String!]
    startsWith: String
    mode: String
}

input StringNullableFilter {
    contains: String
    endsWith: String
    equals: String
    in: [String!]
    not: StringFilter
    notIn: [String!]
    startsWith: String
    mode: String
    isNull: Boolean
}

input StringListFilter {
    equals: [String!]
    has: String
    hasEvery: [String!]
    hasSome: [String!]
    isEmpty: Boolean
}

input BooleanFilter {
    equals: Boolean
    not: BooleanFilter
}

input BooleanNullableFilter {
    equals: Boolean
    not: BooleanFilter
    isNull: Boolean
}

input BooleanListFilter {
    equals: [Boolean!]
    has: Boolean
    hasEvery: [Boolean!]
    hasSome: [Boolean!]
}

type Mutation {
    """
    Create a new single User record.
    """
    createUser(data: UserCreateInput!): User

    """
    Create multiple new User records.
    """
    createManyUsers(
        data: [UserCreateManyInput!]
        skipDuplicates: Boolean
    ): BatchPayload

    """
    Update an existing single User record.
    """
    updateUser(
        where: UserWhereUniqueInput!
        data: UserUpdateInput
        operation: UserOperationInput
    ): User

    """
    Update multiple existing User records.
    """
    updateManyUsers(
        where: UserWhereInput!
        data: UserUpdateInput
        operation: UserOperationInput
    ): BatchPayload

    """
    Update an existing or create a new single User record.
    """
    upsertUser(
        create: UserCreateInput!
        update: UserUpdateInput!
        where: UserWhereUniqueInput!
    ): User

    """
    Delete a single User record.
    """
    deleteUser(where: UserWhereUniqueInput!): User

    """
    Delete multiple User records.
    """
    deleteManyUsers(where: UserWhereInput!): BatchPayload

    """
    Create a new single Post record.
    """
    createPost(data: PostCreateInput!): Post

    """
    Create multiple new Post records.
    """
    createManyPosts(
        data: [PostCreateManyInput!]
        skipDuplicates: Boolean
    ): BatchPayload

    """
    Update an existing single Post record.
    """
    updatePost(
        where: PostWhereUniqueInput!
        data: PostUpdateInput
        operation: PostOperationInput
    ): Post

    """
    Update multiple existing Post records.
    """
    updateManyPosts(
        where: PostWhereInput!
        data: PostUpdateInput
        operation: PostOperationInput
    ): BatchPayload

    """
    Update an existing or create a new single Post record.
    """
    upsertPost(
        create: PostCreateInput!
        update: PostUpdateInput!
        where: PostWhereUniqueInput!
    ): Post

    """
    Delete a single Post record.
    """
    deletePost(where: PostWhereUniqueInput!): Post

    """
    Delete multiple Post records.
    """
    deleteManyPosts(where: PostWhereInput!): BatchPayload
}
type Query {
    """
    Find a single User record by unique identifier.
    """
    getUser(where: UserWhereUniqueInput!): User

    """
    Find many User records (optional query filters).
    """
    listUsers(
        where: UserWhereInput
        orderBy: [UserOrderByInput]
        skip: Int
        take: Int
    ): [User]

    """
    Count all User records (optional query filters).
    """
    countUsers(
        where: UserWhereInput
        orderBy: [UserOrderByInput]
        skip: Int
        take: Int
    ): Int

    """
    Find a single Post record by unique identifier.
    """
    getPost(where: PostWhereUniqueInput!): Post

    """
    Find many Post records (optional query filters).
    """
    listPosts(
        where: PostWhereInput
        orderBy: [PostOrderByInput]
        skip: Int
        take: Int
    ): [Post]

    """
    Count all Post records (optional query filters).
    """
    countPosts(
        where: PostWhereInput
        orderBy: [PostOrderByInput]
        skip: Int
        take: Int
    ): Int
}
type Subscription {
    """
    Triggered from `createUser` mutation (excl. `createManyUsers` and `upsertUser`).
    """
    onCreatedUser(id: Int, email: AWSEmail): User
        @aws_subscribe(mutations: ["createUser"])

    """
    Triggered from `updateUser` mutation (excl. `updateManyUsers` and `upsertUser`).
    """
    onUpdatedUser(id: Int, email: AWSEmail): User
        @aws_subscribe(mutations: ["updateUser"])

    """
    Triggered from `upsertUser` mutation.
    """
    onUpsertedUser(id: Int, email: AWSEmail): User
        @aws_subscribe(mutations: ["upsertUser"])

    """
    Triggered from `deleteUser` mutation (excl. `deleteManyUsers`).
    """
    onDeletedUser(id: Int, email: AWSEmail): User
        @aws_subscribe(mutations: ["deleteUser"])

    """
    Triggered from ANY SINGLE record mutation.
    """
    onMutatedUser(id: Int, email: AWSEmail): User
        @aws_subscribe(
            mutations: [
                "createUser"
                "updateUser"
                "upsertUser"
                "deleteUser"
            ]
        )

    """
    Triggered from `createManyUsers` mutation.
    """
    onCreatedManyUsers: BatchPayload
        @aws_subscribe(mutations: ["createManyUsers"])

    """
    Triggered from `updateManyUsers` mutation.
    """
    onUpdatedManyUsers: BatchPayload
        @aws_subscribe(mutations: ["updateManyUsers"])

    """
    Triggered from ANY MULTIPLE records mutation.
    """
    onMutatedManyUsers: BatchPayload
        @aws_subscribe(
            mutations: [
                "createManyUsers"
                "updateManyUsers"
                "deleteManyUsers"
            ]
        )

    """
    Triggered from `deleteManyUsers` mutation.
    """
    onDeletedManyUsers: BatchPayload
        @aws_subscribe(mutations: ["deleteManyUsers"])

    """
    Triggered from `createPost` mutation (excl. `createManyPosts` and `upsertPost`).
    """
    onCreatedPost(id: Int): Post
        @aws_subscribe(mutations: ["createPost"])

    """
    Triggered from `updatePost` mutation (excl. `updateManyPosts` and `upsertPost`).
    """
    onUpdatedPost(id: Int): Post
        @aws_subscribe(mutations: ["updatePost"])

    """
    Triggered from `upsertPost` mutation.
    """
    onUpsertedPost(id: Int): Post
        @aws_subscribe(mutations: ["upsertPost"])

    """
    Triggered from `deletePost` mutation (excl. `deleteManyPosts`).
    """
    onDeletedPost(id: Int): Post
        @aws_subscribe(mutations: ["deletePost"])

    """
    Triggered from ANY SINGLE record mutation.
    """
    onMutatedPost(id: Int): Post
        @aws_subscribe(
            mutations: [
                "createPost"
                "updatePost"
                "upsertPost"
                "deletePost"
            ]
        )

    """
    Triggered from `createManyPosts` mutation.
    """
    onCreatedManyPosts: BatchPayload
        @aws_subscribe(mutations: ["createManyPosts"])

    """
    Triggered from `updateManyPosts` mutation.
    """
    onUpdatedManyPosts: BatchPayload
        @aws_subscribe(mutations: ["updateManyPosts"])

    """
    Triggered from ANY MULTIPLE records mutation.
    """
    onMutatedManyPosts: BatchPayload
        @aws_subscribe(
            mutations: [
                "createManyPosts"
                "updateManyPosts"
                "deleteManyPosts"
            ]
        )

    """
    Triggered from `deleteManyPosts` mutation.
    """
    onDeletedManyPosts: BatchPayload
        @aws_subscribe(mutations: ["deleteManyPosts"])
}
